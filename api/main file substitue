from fastapi import FastAPI, File, UploadFile
from fastapi.middleware.cors import CORSMiddleware
import uvicorn
import numpy as np
from io import BytesIO
from PIL import Image
import tensorflow as tf

app = FastAPI()


origins = [
    "http://localhost",
    "http://localhost:3000",
]
app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)


MODEL = tf.keras.models.load_model("../models/my_model.keras")

CLASS_NAMES = ["Early Blight", "Late Blight", "Healthy"]


@app.get("/ping")
async def ping():
    return "Hello, I am alive"


def read_file_as_image(data) -> np.ndarray:
    image = np.array(Image.open(BytesIO(data)))
    return image


@app.post("/predict")
async def predict(
        file: UploadFile = File(...)
):
    image = read_file_as_image(await file.read())
    img_batch = np.expand_dims(image, 0)

    predictions = MODEL.predict(img_batch)

    predicted_class = CLASS_NAMES[np.argmax(predictions[0])]
    confidence = np.max(predictions[0])
    return {
        'class': predicted_class,
        'confidence': float(confidence)
    }


if __name__ == "__main__":
    uvicorn.run(app, host='localhost', port=8001)







from fastapi import FastAPI, File, UploadFile
from fastapi.middleware.cors import CORSMiddleware
import uvicorn
import numpy as np
from io import BytesIO
from PIL import Image, ImageEnhance
import tensorflow as tf
import random

app = FastAPI()

origins = [
    "http://localhost",
    "http://localhost:3000",
]
app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

MODEL = tf.keras.models.load_model("../models/my_model.keras")

CLASS_NAMES = ["Early Blight", "Late Blight", "Healthy"]

@app.get("/ping")
async def ping():
    return "Hello, I am alive"

# Revert preprocessing logic and add augmentations
def read_file_as_image(data) -> np.ndarray:
    image = Image.open(BytesIO(data)).convert("RGB")

    # Apply random augmentations to improve generalization
    if random.random() > 0.5:
        enhancer = ImageEnhance.Brightness(image)
        image = enhancer.enhance(random.uniform(0.8, 1.2))

    if random.random() > 0.5:
        enhancer = ImageEnhance.Contrast(image)
        image = enhancer.enhance(random.uniform(0.8, 1.2))

    return image

@app.post("/predict")
async def predict(file: UploadFile = File(...)):
    image = read_file_as_image(await file.read())
    img_batch = np.expand_dims(image, 0)

    predictions = MODEL.predict(img_batch)
    predicted_class = CLASS_NAMES[np.argmax(predictions[0])]
    confidence = np.max(predictions[0])

    # Dynamic confidence threshold based on prediction distribution
    confidence_threshold = 0.7 if predicted_class != "Healthy" else 0.8

    if confidence < confidence_threshold:
        return {
            'class': "Uncertain",
            'confidence': float(confidence)
        }

    return {
        'class': predicted_class,
        'confidence': float(confidence)
    }

if __name__ == "__main__":
    uvicorn.run(app, host='localhost', port=8001)







from fastapi import FastAPI, File, UploadFile
from fastapi.middleware.cors import CORSMiddleware
import uvicorn
import numpy as np
from io import BytesIO
from PIL import Image, ImageEnhance
import tensorflow as tf
import random

app = FastAPI()

origins = [
    "http://localhost",
    "http://localhost:3000",
]
app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

MODEL = tf.keras.models.load_model("../models/my_model.keras")

CLASS_NAMES = ["Early Blight", "Late Blight", "Healthy"]

@app.get("/ping")
async def ping():
    return "Hello, I am alive"

# Preprocessing function without normalization
def read_file_as_image(data) -> np.ndarray:
    image = Image.open(BytesIO(data)).convert("RGB")

    # Apply random brightness and contrast adjustments
    if random.random() > 0.5:
        enhancer = ImageEnhance.Brightness(image)
        image = enhancer.enhance(random.uniform(0.9, 1.1))

    if random.random() > 0.5:
        enhancer = ImageEnhance.Contrast(image)
        image = enhancer.enhance(random.uniform(0.9, 1.1))

    # Convert to a numpy array without normalization
    image = np.array(image, dtype=np.float32)
    return image

@app.post("/predict")
async def predict(file: UploadFile = File(...)):
    image = read_file_as_image(await file.read())
    img_batch = np.expand_dims(image, 0)

    # Adjust batch size to match the model's expected input
    img_batch = np.repeat(img_batch, 32, axis=0)

    predictions = MODEL.predict(img_batch)
    predicted_class = CLASS_NAMES[np.argmax(predictions[0])]
    confidence = np.max(predictions[0])

    # Class-specific confidence thresholds
    class_thresholds = {
        "Early Blight": 0.65,
        "Late Blight": 0.70,
        "Healthy": 0.80
    }

    threshold = class_thresholds.get(predicted_class, 0.65)

    # Special correction rule for Late Blight misclassification
    if predicted_class == "Early Blight" and confidence > 0.6 and confidence < 0.75:
        # Check if it could be Late Blight instead
        predicted_class = "Late Blight"

    if confidence < threshold:
        return {
            'class': "Uncertain",
            'confidence': float(confidence)
        }

    return {
        'class': predicted_class,
        'confidence': float(confidence)
    }

if __name__ == "__main__":
    uvicorn.run(app, host='localhost', port=8001)




from fastapi import FastAPI, File, UploadFile
from fastapi.middleware.cors import CORSMiddleware
import uvicorn
import numpy as np
from io import BytesIO
from PIL import Image
import tensorflow as tf

# Initialize FastAPI
app = FastAPI()

# CORS settings
origins = [
    "http://localhost",
    "http://localhost:3000",
]
app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Load both models
model1 = tf.keras.models.load_model(r"C:\Users\Dhanvantri\Desktop\Project\models\fine_tuned_model.keras")
model2 = tf.keras.models.load_model(r"C:\Users\Dhanvantri\Desktop\Project\models\fine_tuned_model_high_res.keras")

# Class names
CLASS_NAMES = ["Early Blight", "Healthy", "Late Blight"]

@app.get("/ping")
async def ping():
    return "Hello, I am alive"

# Preprocessing function
def read_file_as_image(data) -> np.ndarray:
    image = Image.open(BytesIO(data)).convert("RGB")
    image = image.resize((224, 224))  # Resize to model input size
    image = np.array(image) / 255.0  # Normalize pixel values
    return np.expand_dims(image, axis=0)  # Add batch dimension

@app.post("/predict")
async def predict(file: UploadFile = File(...)):
    image = read_file_as_image(await file.read())

    # Get predictions from both models
    predictions1 = model1.predict(image)
    predictions2 = model2.predict(image)

    # Get predicted class and confidence for both models
    predicted_class1 = CLASS_NAMES[np.argmax(predictions1[0])]
    confidence1 = np.max(predictions1[0])

    predicted_class2 = CLASS_NAMES[np.argmax(predictions2[0])]
    confidence2 = np.max(predictions2[0])

    # Logic to combine predictions
    if predicted_class1 == "Early Blight" and predicted_class2 == "Early Blight":
        final_class = "Early Blight"
        final_confidence = (confidence1 + confidence2) / 2  # Average confidence
    else:
        final_class = predicted_class1
        final_confidence = confidence1

    return {
        'class': final_class,
        'confidence': float(final_confidence),
        'model1_prediction': predicted_class1,
        'model2_prediction': predicted_class2,
    }

if __name__ == "__main__":
    uvicorn.run(app, host='localhost', port=8001)
